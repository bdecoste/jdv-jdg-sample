<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vdb name="PortfolioMaterialize" version="1">

    <description>The Portfolio Dynamic VDB that performs materialization</description>
    
    <!-- 
      Setting to use connector supplied metadata. Can be "true" or "cached".  
      "true" will obtain metadata once for every launch of Teiid. 
      "cached" will save a file containing the metadata into 
      the deploy/<vdb name>/<vdb version/META-INF directory
    -->
    <property name="UseConnectorMetadata" value="true" />
    
    <import-vdb name="Portfolio" version="1" import-data-policies="true"/>
    
                                              
	<model name="StocksMatModel" type="VIRTUAL">
		<metadata type="DDL"><![CDATA[
	CREATE view stockPricesMatView
		(
            product_id integer,
            symbol string,
            price bigdecimal,
            company_name   varchar(256)
 		) OPTIONS (MATERIALIZED 'TRUE', UPDATABLE 'TRUE',         
               MATERIALIZED_TABLE 'Accounts.h2_stock_mat', 
               "teiid_rel:MATVIEW_TTL" 60000,
               "teiid_rel:MATVIEW_BEFORE_LOAD_SCRIPT" 'execute accounts.native(''truncate table mat_stock_staging'');',
               "teiid_rel:MATVIEW_AFTER_LOAD_SCRIPT"  'execute accounts.native(''ALTER TABLE h2_stock_mat RENAME TO h2_stock_mat_temp'');execute accounts.native(''ALTER TABLE mat_stock_staging RENAME TO h2_stock_mat'');execute accounts.native(''ALTER TABLE h2_stock_mat_temp RENAME TO mat_stock_staging'');', 
               "teiid_rel:ON_VDB_DROP_SCRIPT" 'DELETE FROM Accounts.status WHERE Name=''stockPricesMatView'' AND schemaname = ''StocksMatModel''',
               "teiid_rel:MATERIALIZED_STAGE_TABLE" 'Accounts.mat_stock_staging',
               "teiid_rel:ALLOW_MATVIEW_MANAGEMENT" 'true', 
               "teiid_rel:MATVIEW_STATUS_TABLE" 'status', 
               "teiid_rel:MATVIEW_SHARE_SCOPE" 'NONE',
               "teiid_rel:MATVIEW_ONERROR_ACTION" 'THROW_EXCEPTION')
 		AS SELECT  A.ID, S.symbol, S.price, A.COMPANY_NAME
                    FROM Stocks.StockPrices AS S, Accounts.PRODUCT AS A
                    WHERE S.symbol = A.SYMBOL;
    	]]>
   		</metadata>
	</model>  
	
</vdb>
